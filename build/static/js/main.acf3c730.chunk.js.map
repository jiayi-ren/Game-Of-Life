{"version":3,"sources":["Box.js","Grid.js","Options.js","Game.js","index.js"],"names":["Box","props","row","col","selectBox","boxClass","id","className","onClick","Grid","rows","cols","grid","rowsArray","i","j","boxId","push","key","style","display","gridTemplateColumns","Options","run","toggle","reset","random","operations","createGrid","rowsNum","colsNum","Array","from","Game","useState","speed","setSpeed","setRows","setCols","generation","setGeneration","setGrid","isRunning","setIsRunning","useEffect","timeoutObj","setTimeout","next","gridOriginal","copy","JSON","parse","stringify","neighbors","forEach","op","newI","newJ","nextGen","clearTimeout","gridClone","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acf3c730.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Box = props => {\r\n\r\n    const { row, col, selectBox, boxClass, id } = props;\r\n\r\n    return (\r\n        <div\r\n            className={boxClass}\r\n            id={id}\r\n            onClick={() => {selectBox(row, col)}}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Box;","import React from 'react';\r\nimport Box from './Box';\r\n\r\nconst Grid = props => {\r\n\r\n    const { rows, cols, grid, selectBox } = props\r\n    let rowsArray = []\r\n    let boxClass = \"\" \r\n\r\n    for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n            let boxId = i + \"_\" + j;\r\n\r\n            boxClass = grid[i][j] ? \"box on\" : \"box off\";\r\n            rowsArray.push(\r\n                <Box\r\n                    boxClass={boxClass}\r\n                    key={boxId}\r\n                    row={i}\r\n                    col={j}\r\n                    selectBox={selectBox}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid\" \r\n            style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: `repeat(${cols}, 20px)`\r\n            }}>\r\n            {rowsArray}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Grid;","import React from 'react';\r\n\r\nconst Options = props => {\r\n\r\n    const { run, toggle, reset, random } = props\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={toggle}>{run? 'Pause': 'Start'}</button>\r\n            <button onClick={reset}>Reset</button>\r\n            <button onClick={random}>Random</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Options;","import React, { useState, useEffect } from 'react';\r\nimport Grid from './Grid';\r\nimport Options from './Options';\r\n\r\nconst operations = [\r\n    [-1, -1],\r\n    [-1, 0],\r\n    [-1, 1],\r\n    [0, -1],\r\n    [0, 1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1]\r\n];\r\n\r\nconst Game = props => {\r\n\r\n    const [speed, setSpeed] = useState(1); // speed, 1 generation/100ms\r\n    const [rows, setRows] = useState(25); // row\r\n    const [cols, setCols] = useState(25);\r\n    const [generation, setGeneration] = useState(0);\r\n    const [grid, setGrid] = useState(createGrid(25, 25));\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    function nextGen(gridOriginal, rowsNum, colsNum) {\r\n        let copy = JSON.parse(JSON.stringify(gridOriginal))\r\n        for (let i = 0; i < rowsNum; i++) {\r\n            for (let j = 0; j < colsNum; j++) {\r\n                let neighbors = 0;\r\n                operations.forEach( op => {\r\n                    const newI = i + op[0];\r\n                    const newJ = j + op[1];\r\n                    if (newI >= 0 && newI < rowsNum && newJ >= 0 && newJ < colsNum) {\r\n                        neighbors += gridOriginal[newI][newJ];\r\n                    }\r\n                });\r\n                if (gridOriginal[i][j] === 1) {\r\n                    copy[i][j] = neighbors === 2 || neighbors === 3? 1: 0;\r\n                } else {\r\n                    copy[i][j] = neighbors === 3? 1: 0;\r\n                }\r\n    \r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timeoutObj = null;\r\n        if (isRunning) {\r\n            timeoutObj = setTimeout(() => {\r\n                const next = nextGen(grid, rows, cols);\r\n                setGeneration(generation + 1);\r\n                setGrid(next);\r\n            }, speed);\r\n        } else {\r\n            clearTimeout(timeoutObj);\r\n        } \r\n        return () => clearTimeout(timeoutObj);;\r\n    }, [isRunning, generation, rows, cols, grid, speed])\r\n\r\n    const selectBox = (row, col) => {\r\n        let gridClone = [...grid];\r\n        gridClone[row][col] =  gridClone[row][col]? 0: 1;\r\n        setGrid(gridClone);\r\n    }\r\n\r\n    const randomLexicon = () => {\r\n        let gridClone = JSON.parse(JSON.stringify(createGrid(rows, cols)));\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (Math.floor(Math.random() * 4) === 1) {\r\n                    gridClone[i][j] = 1;\r\n                }\r\n            }\r\n        }\r\n        setGrid(gridClone);\r\n    }\r\n\r\n    const toggle = () => {\r\n        setIsRunning(!isRunning);\r\n    }\r\n\r\n    const reset = () => {\r\n        setIsRunning(false);\r\n        setGrid(createGrid(rows, cols));\r\n        setGeneration(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>Generation: {generation}</p>\r\n            <Grid \r\n                rows={rows}\r\n                cols={cols}\r\n                selectBox={selectBox}\r\n                grid={grid}\r\n            />\r\n            <Options\r\n                run={isRunning}\r\n                toggle={toggle}\r\n                reset={reset}\r\n                random={randomLexicon}\r\n                setRows={setRows}\r\n                setCols={setCols}\r\n                setSpeed={setSpeed}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction createGrid(rowsNum, colsNum) {\r\n    const rows = [];\r\n    for (let i = 0; i < rowsNum; i++) {\r\n        rows.push(Array.from(Array(colsNum), () => 0));\r\n    }\r\n    return rows;\r\n}\r\n\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './sass/index.scss';\nimport Game from './Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game></Game>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}