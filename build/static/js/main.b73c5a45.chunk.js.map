{"version":3,"sources":["Box.js","Grid.js","Options.js","Game.js","index.js"],"names":["Box","props","row","col","selectBox","boxClass","id","boxSize","useEffect","console","log","boxes","document","getElementsByClassName","i","length","style","width","height","className","onClick","Grid","rows","cols","grid","rowsArray","j","boxId","push","key","display","gridTemplateColumns","Options","run","toggle","reset","random","setSpeed","speed","setBoxSize","type","min","max","value","onChange","evt","parseInt","target","operations","createGrid","rowsNum","colsNum","Array","from","calGridSize","Math","floor","Game","w","window","innerWidth","h","innerHeight","initRows","initCols","useState","setRows","setCols","generation","setGeneration","setGrid","isRunning","setIsRunning","newRows","newCols","timeoutObj","setTimeout","next","gridOriginal","copy","JSON","parse","stringify","neighbors","forEach","op","newI","newJ","nextGen","clearTimeout","gridClone","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b73c5a45.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst Box = props => {\r\n\r\n    const { row, col, selectBox, boxClass, id, boxSize } = props;\r\n\r\n    useEffect(() => {\r\n        console.log(boxSize)\r\n        const boxes = document.getElementsByClassName(\"box\")\r\n        for (let i = 0; i < boxes.length; i++) {\r\n            boxes[i].style.width = `${boxSize}px`;\r\n            boxes[i].style.height= `${boxSize}px`;\r\n        }\r\n        console.log(boxes)\r\n    }, [boxSize])\r\n\r\n    return (\r\n        <div\r\n            className={boxClass}\r\n            id={id}\r\n            onClick={() => {selectBox(row, col)}}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Box;","import React from 'react';\r\nimport Box from './Box';\r\n\r\nconst Grid = props => {\r\n\r\n    const { rows, cols, grid, selectBox, boxSize } = props\r\n    let rowsArray = []\r\n    let boxClass = \"\" \r\n\r\n    for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n            let boxId = i + \"_\" + j;\r\n\r\n            boxClass = grid[i][j] ? \"box on\" : \"box off\";\r\n            rowsArray.push(\r\n                <Box\r\n                    boxClass={boxClass}\r\n                    key={boxId}\r\n                    row={i}\r\n                    col={j}\r\n                    selectBox={selectBox}\r\n                    boxSize={boxSize}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid-container\" >\r\n            <div className=\"grid\"\r\n                style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: `repeat(${cols}, ${boxSize}px)`\r\n                }}\r\n            >\r\n            {rowsArray}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Grid;","import React from 'react';\r\n\r\nconst Options = props => {\r\n\r\n    const { run, toggle,\r\n        reset, random,\r\n        setSpeed, speed,\r\n        boxSize, setBoxSize\r\n    } = props\r\n\r\n    const speedChange = evt => {\r\n        setSpeed(1000 - parseInt(evt.target.value))\r\n    }\r\n\r\n    const boxSizeChange = evt => {\r\n        setBoxSize(parseInt(evt.target.value));\r\n    }\r\n\r\n    return (\r\n        <div className=\"options\">\r\n            <button onClick={toggle}>{run? 'Pause': 'Start'}</button>\r\n            <button onClick={reset}>Reset</button>\r\n            <button onClick={random}>Random</button>\r\n            <label>Speed\r\n                <input type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"1000\"\r\n                    value={1000-speed}\r\n                    onChange={speedChange}\r\n                ></input>\r\n            </label>\r\n            <label>Grid\r\n                <input type=\"range\"\r\n                    min=\"10\"\r\n                    max=\"30\"\r\n                    value={boxSize}\r\n                    onChange={boxSizeChange}\r\n                ></input>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Options;","import React, { useState, useEffect } from 'react';\r\nimport Grid from './Grid';\r\nimport Options from './Options';\r\n\r\nconst operations = [\r\n    [-1, -1],\r\n    [-1, 0],\r\n    [-1, 1],\r\n    [0, -1],\r\n    [0, 1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1]\r\n];\r\n\r\nconst Game = props => {\r\n\r\n    let w = window.innerWidth;\r\n    let h = window.innerHeight;\r\n\r\n    const initRows = calGridSize(w,h,20).rows-1;\r\n    const initCols = calGridSize(w,h,20).cols-1;\r\n\r\n    const [speed, setSpeed] = useState(500); // speed, 1 generation/500ms\r\n    const [rows, setRows] = useState(initRows);\r\n    const [cols, setCols] = useState(initCols);\r\n    const [generation, setGeneration] = useState(0);\r\n    const [grid, setGrid] = useState(createGrid(initRows, initCols));\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [boxSize, setBoxSize] = useState(20);\r\n\r\n    function nextGen(gridOriginal, rowsNum, colsNum) {\r\n        let copy = JSON.parse(JSON.stringify(gridOriginal))\r\n        for (let i = 0; i < rowsNum; i++) {\r\n            for (let j = 0; j < colsNum; j++) {\r\n                let neighbors = 0;\r\n                operations.forEach( op => {\r\n                    const newI = i + op[0];\r\n                    const newJ = j + op[1];\r\n                    if (newI >= 0 && newI < rowsNum && newJ >= 0 && newJ < colsNum) {\r\n                        neighbors += gridOriginal[newI][newJ];\r\n                    }\r\n                });\r\n                if (gridOriginal[i][j] === 1) {\r\n                    copy[i][j] = neighbors === 2 || neighbors === 3? 1: 0;\r\n                } else {\r\n                    copy[i][j] = neighbors === 3? 1: 0;\r\n                }\r\n    \r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const newRows = calGridSize(w,h,boxSize).rows-1;\r\n        const newCols = calGridSize(w,h,boxSize).cols-1;\r\n        setRows(newRows);\r\n        setCols(newCols);\r\n    }, [boxSize, w, h])\r\n\r\n    useEffect(() => {\r\n        let timeoutObj = null;\r\n        if (isRunning) {\r\n            timeoutObj = setTimeout(() => {\r\n                const next = nextGen(grid, rows, cols);\r\n                setGeneration(generation + 1);\r\n                setGrid(next);\r\n            }, speed);\r\n        } else {\r\n            clearTimeout(timeoutObj);\r\n        } \r\n        return () => clearTimeout(timeoutObj);;\r\n    }, [isRunning, generation, rows, cols, grid, speed])\r\n\r\n    const selectBox = (row, col) => {\r\n        let gridClone = [...grid];\r\n        gridClone[row][col] =  gridClone[row][col]? 0: 1;\r\n        setGrid(gridClone);\r\n    }\r\n\r\n    const randomLexicon = () => {\r\n        let gridClone = JSON.parse(JSON.stringify(createGrid(rows, cols)));\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (Math.floor(Math.random() * 4) === 1) {\r\n                    gridClone[i][j] = 1;\r\n                }\r\n            }\r\n        }\r\n        setGrid(gridClone);\r\n    }\r\n\r\n    const toggle = () => {\r\n        setIsRunning(!isRunning);\r\n    }\r\n\r\n    const reset = () => {\r\n        setIsRunning(false);\r\n        setGrid(createGrid(rows, cols));\r\n        setGeneration(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1><span>John Conway's</span> Game of Life</h1>\r\n            <h2>Generation: {generation}</h2>\r\n            <Grid \r\n                rows={rows}\r\n                cols={cols}\r\n                selectBox={selectBox}\r\n                grid={grid}\r\n                boxSize={boxSize}\r\n            />\r\n            <Options\r\n                run={isRunning}\r\n                toggle={toggle}\r\n                reset={reset}\r\n                random={randomLexicon}\r\n                setRows={setRows}\r\n                setCols={setCols}\r\n                speed={speed}\r\n                setSpeed={setSpeed}\r\n                boxSize={boxSize}\r\n                setBoxSize={setBoxSize}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction createGrid(rowsNum, colsNum) {\r\n    const rows = [];\r\n    for (let i = 0; i < rowsNum; i++) {\r\n        rows.push(Array.from(Array(colsNum), () => 0));\r\n    }\r\n    return rows;\r\n}\r\n\r\nfunction calGridSize(width, height, boxSize) {\r\n    let rows = Math.floor(height*0.7 / boxSize);\r\n    let cols = Math.floor(width*0.9 / boxSize);\r\n\r\n    return {rows, cols};\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './sass/index.scss';\nimport Game from './Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game></Game>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}